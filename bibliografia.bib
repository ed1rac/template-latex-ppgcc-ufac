
@phdthesis{murta_gerencia_2006,
address = {Rio de Janeiro},
type = {Tese de Doutorado},
title = {Gerência de Configuração no Desenvolvimento baseado em Componentes},
urldate = {2014-12-03},
school = {Universidade Federal do Rio de Janeiro},
author = {Murta, Leonardo Gresta Paulino},
year = {2006}
}

@book{pressman_engenharia_2011,
address = {Porto Alegre},
edition = {7},
title = {Engenharia de Software: uma abordagem profissional},
isbn = {978-85-63308-33-7},
publisher = {AMGH},
author = {Pressman, Roger S.},
year = {2011}
}

@inproceedings{msr17challenge,
address = {Buenos Aires, Argentina},
title = {TravisTorrent:Synthesizing Travis CI and GitHub for Full-stack Research on Continuous Integration},
isbn = {978-1-5386-1544-7},
shorttitle = {TravisTorrent},
doi = {10.1109/MSR.2017.24},
abstract = {Continuous Integration (CI) has become a best practice of modern software development. Thanks in part to its tight integration with GitHub, Travis CI has emerged as arguably the most widely used CI platform for Open-Source Software (OSS) development. However, despite its prominent role in Software Engineering in practice, the benefits, costs, and implications of doing CI are all but clear from an academic standpoint. Little research has been done, and even less was of quantitative nature. In order to lay the groundwork for data-driven research on CI, we built TravisTorrent, travistorrent.testroots.org, a freely available data set based on Travis CI and GitHub that provides easy access to hundreds of thousands of analyzed builds from more than 1,000 projects. Unique to TravisTorrent is that each of its 2,640,825 Travis builds is synthesized with meta data from Travis CI's API, the results of analyzing its textual build log, a link to the GitHub commit which triggered the build, and dynamically aggregated project data from the time of commit extracted through GHTorrent.},
urldate = {2017-06-14},
booktitle = {Proceedings of the 14th International Conference on Mining Software Repositories (MSR)},
publisher = {IEEE},
author = {Beller, Moritz and Gousios, Georgios and Zaidman, Andy},
year = {2017},
pages = {447--450}
}

@inproceedings{de_lima_junior_developers_2015,
address = {Salamanca, Spain},
title = {Developers Assignment for Analyzing Pull Requests},
isbn = {978-1-4503-3196-8},
@url = {http://doi.acm.org/10.1145/2695664.2695884},
doi = {10.1145/2695664.2695884},
abstract = {A new collaboration approach is becoming increasingly common in open-source projects: the pull request model. In this kind of collaboration, developers that do not belong to the core team of a project can submit contributions to the core team. In projects that receive many pull requests, the task of assigning developers to analyze them is a difficult one. In this work, we propose to use data mining techniques, more specifically, classification strategies, in order to suggest the most appropriate developers to analyze a contribution, considering the pull request model. The experiments were conducted using 21 open source projects, each one characterized by 14 attributes. The first set of experiments aimed at indicating just one developer to analyze the pull request. The obtained predictive accuracy ranged from 22.45% to 68.27%. The Random Forest classifier achieved the best result in 76% on the projects. In the second set of experiments, we conclude that, when suggesting three developers to analyze a pull request, the chance of identifying the developer that actually analyzed the pull request ranged from 47.33% to 95.47%.},
urldate = {2015-08-21},
booktitle = {Proceedings of the 30th Annual ACM Symposium on Applied Computing (SAC)},
publisher = {ACM},
author = {de Lima JÚnior, Manoel Limeira and Soares, Daricélio Moreira and Plastino, Alexandre and Murta, Leonardo},
year = {2015},
keywords = {distributed software development, pull-based development, pull request assignment},
pages = {1567--1572}
}
